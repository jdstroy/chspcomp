/***********************************************************

	追加機能付き"hspcmp.dll"ラッパーモジュール

		【2008/01/07 更新】


		【使用上の注意】

			処理対象スクリプトが実行ファイル自動作成用に
　　　　	書かれていることが前提。


		【使い方】

			コンパイル

				chsc_ini -> chsc_autocomp

			オブジェクトファイル実行

				chsc_ini -> chsc_run

			コンパイル＋実行

				chsc_ini -> chsc_autocomp -> chsc_run

			実行ファイル作成

				chsc_ini -> chsc_autocomp -> chsc_automake

			キーワード一覧を取得

				chsc_getsym


		【命令一覧】

			モジュール初期化

;			#deffunc chsc_ini str targetpath_, int makeflag_

				targetpath_		:	処理対象のスクリプトまたはオブジェクトファイルのフルパス
				makeflag_		:	実行ファイルの作成を行う場合は1、それ以外の場合は0を指定


			実行ファイル自動作成向けのコンパイル

;			#deffunc chsc_autocomp var cmpname_, int dbsymflag_, int dbinfoflag_, int dbwinflag_, int nomacflag_

				cmpname_		:	作成するオブジェクトファイル名
				dbsymflag_		:	デバッグシンボルを有効にするかどうか（1=yes or 0=no）
				dbinfoflag_		:	デバッグ情報を付加するかどうか（1=yes or 0=no）
				dbwinflag_		:	デバッグウィンドウ常時表示を有効にするかどうか（1=yes or 0=no）
				nomacflag_		:	拡張マクロを有効にするかどうか（1=yes or 0=no）


			オブジェクトファイル実行

;			#deffunc chsc_run str runopt_

				runopt_			:	コマンドラインに付加する起動オプション文字列


			実行ファイル自動作成

;			#deffunc chsc_automake


			キーワード一覧を取得

;			#defcfunc chsc_getsym


		【依存モジュール】

			gm_hrt_icon.hsp

***********************************************************/
#ifndef	__GM_CHSPCOMP__
#define	global	__GM_CHSPCOMP__

#include "gm_hrt_icon.hsp"


#module chspcomp

	#include "hspcmp.as"

	#const	TRUE				1
	#const	FALSE				0

	#const	GETPATH_NAME		1	; 拡張子を除くファイル名
	#const	GETPATH_EXT			2	; 拡張子のみ(.???)
	#const	GETPATH_REMDIR		8	; ディレクトリ情報を取り除く
	#const	GETPATH_LOWCASE		16	; 文字列を小文字に変換する
	#const	GETPATH_DIR			32	; ディレクトリ情報のみ

	/* hsc_comp命令パラメータ用 */
	#const	NO_HSP3_MACRO		1
	#const	DEBUG_SYMBOL_FLAG	2
	#const	AUTO_MAKE_FLAG		4

	/* _chsc_savemes */
	#define	CHSC_MESFILE_NAME	"chspcomp.txt"

	/* _chsc_getexepath */
	#define	DEF_EXENAME			"hsptmp.exe"
	#define	EXE_EXT				".exe"

	/* chsc_autocomp */
	#const	COMP_OK				0
	#const	COMP_ERR			1

	/* chsc_run */
	#define	DEF_RTEXENAME		"hsp3.exe"

	/* chsc_automake */
	#const	MAKE_OK				0
	#const	MAKE_ERR			1
	#define	OBJ_EXT				".ax"

	;変数、ユーザ定義命令・関数　命名規則
	;
	;	特に重要な変数							_???
	;	外部から呼んではいけない命令・関数		_???
	;	命令・関数のパラメータ					???_
	;	戻り値用パラメータ						ret_???_

/**********************************************************/
// コンパイラからのメッセージを取得
/**********************************************************/
#defcfunc _chsc_getmes

	hsc3_messize	len
	sdim	getmesbuf, (len + 1)
	hsc_getmes		getmesbuf
	return	getmesbuf

/**********************************************************/
// コンパイラからのメッセージを保存
/**********************************************************/
#deffunc _chsc_savemes

	savemesbuf	= _chsc_getmes()
	if (savemesbuf ! "") {
		notesel		savemesbuf
		notesave	(dir_exe + "\\" + CHSC_MESFILE_NAME)
	}
	return

/**********************************************************/
// 実行ファイル自動作成向けのコンパイル
/**********************************************************/
#deffunc chsc_autocomp var cmpname_, int dbsymflag_, int dbinfoflag_, int dbwinflag_, int nomacflag_

	/* コンパイルモード設定 */
	cmpmode	= AUTO_MAKE_FLAG@chspcomp
	if dbsymflag_ {
		cmpmode	+= DEBUG_SYMBOL_FLAG
	}
	if nomacflag_ {
		cmpmode	+= NO_HSP3_MACRO
	}

	/* オブジェクトファイル名指定 */
	if (cmpname_ = "") {
		cmpname_	= (getpath(_scrname, GETPATH_NAME) + OBJ_EXT)	; スクリプト名＋".ax"
	}
	_objname	= cmpname_

	/* 古いオブジェクトファイルを削除 */
	objpath	= (_targetdir + _objname)
	exist	objpath
	if (strsize > -1) {
		delete	objpath
	}

	/* 古いpackfileを削除 */
	packpath	= (_targetdir + "packfile")
	exist	packpath
	if (strsize > -1) {
		delete	packpath
	}

	/* コンパイル実行 */
	chdir		_targetdir
	hsc_objname	_objname
	hsc_clrmes
	hsc_comp	dbinfoflag_, cmpmode, dbwinflag_
	_chsc_savemes

	/* 結果チェック */
	exist	objpath
	if (strsize = -1) {
		return	COMP_ERR
	}
	return	COMP_OK

/**********************************************************/
// オブジェクトファイル実行
/**********************************************************/
#deffunc chsc_run str runopt_

	/* 起動オプション（コマンドラインパラメータ）の選択 */
	if (_runopt = "") {
		runopt	= runopt_					; コマンドラインで指定されたもの
	}
	else {
		runopt	= _runopt					; スクリプトに埋め込まれていたもの
	}

	chdir	_targetdir

	/* ランタイム名取得 */
	rtname	= ""							; 明示的に文字列変数を用意しないとだめ
	hsc3_getruntime	rtname, _objname		; #runtime命令で指定されたもののみ取得可
	if (rtname = "") {
		rtname	= DEF_RTEXENAME
	}

	/* コマンドライン生成 */
	cmdline	= ("\"" + dir_exe + "\\" + rtname + "\" " + _objname)	; 変数に入れないとだめ（hsc3_run）
	if (runopt ! "") {
		cmdline	+= " " + runopt
	}

	/* 実行 */
	hsc_clrmes
	hsc3_run	cmdline
	_chsc_savemes
	return

/**********************************************************/
// cHspComp専用命令またはプリプロセッサで指定されている値（文字列のみ）を取得
//   [(命令) (オプション名) "(値)"] 形式、または
//   [(命令) "(値)"] 形式のもののみに使える。
/**********************************************************/
#deffunc _chsc_getppvals str scrpath_, str ppcmd_, str optname_, array ret_ppvals_, int repeatflag_
	; scrpath_			処理対象スクリプトパス
	; ppcmd_			対象のプリプロセッサ命令（#を含む）
	; optname_			オプション名（ない場合""を指定する）
	; ret_ppvals_		戻り値（取得した値。""除去済み）
	; repeatflag_		ファイル内で命令が複数使われていた時にすべての値を
	;					取得するなら1、最初の一つだけなら0を指定する

	/* スクリプト読み込み */
	notesel		scrbuf
	noteload	scrpath_

	/* 検索 */
	ppval		= ""
	sdim		ret_ppvals_, 64, 1
	ppval_cnt	= 0

	repeat noteinfo(0)
		noteget	linestr, cnt
		if (linestr = "") {
			continue
		}

		/* プリプロセッサ命令を探す */
		pp_idx	= instr(linestr, 0, ppcmd_)
		if (pp_idx = -1) {
			continue
		}

		/* 命令の前にタブと1バイトスペース以外のものがあったらその行は無視 */
		idx	= 0
*@
		if (idx >= pp_idx) {
			goto	*@f		; 処理続行
		}
		byte	= peek(linestr, idx)
		if ((byte ! ' ') & (byte ! '\t')) {
			continue		; この行の処理は終了
		}
		idx		++
		goto	*@b
*@

		offset	= (pp_idx + strlen(ppcmd_))

		/* オプション名を探す */
		if (optname_ ! "") {
			optname_idx	= instr(linestr, offset, optname_)
			if (optname_idx = -1) {
				continue
			}
			offset	+=	(optname_idx + strlen(optname_))
		}

		/* 定義値を探す */
		ppval_idx		=	instr(linestr, offset, "\"")
		if (ppval_idx = -1) {
			continue
		}
		offset	+=	(ppval_idx + strlen("\""))
		getstr	ppval, linestr, offset, '"'
		ret_ppvals_(ppval_cnt)	= ppval

		/* 複数取得フラグチェック */
		if (repeatflag_ = FALSE) {
			break
		}
		else {
			ppval_cnt	++
		}
	loop
	return

/**********************************************************/
// スクリプトで指定されている実行ファイル名を含むパスを生成
/**********************************************************/
#defcfunc _chsc_getexepath

	_chsc_getppvals (_targetdir + _scrname), "#packopt", "name", exename, FALSE
	if (exename = "") {
		exename	= DEF_EXENAME
	}
	else {
		if (getpath(getpath(exename, GETPATH_EXT), GETPATH_LOWCASE) ! EXE_EXT) {
			exename	+= EXE_EXT
		}
	}
	return	(_targetdir + exename)

/**********************************************************/
// 実行ファイル自動作成
/**********************************************************/
#deffunc chsc_automake; int deltmpflag_

	/* 古い実行ファイルを削除 */
	exepath	= _chsc_getexepath()
	exist	exepath
	if (strsize > -1) {
		delete	exepath
	}

	/* 実行ファイル作成 */
	hsc_clrmes
	hsc3_make	(dir_exe + "\\runtime")
	_chsc_savemes

	/* 実行ファイルの存在を確認 */
	exist	exepath
	if (strsize = -1) {
		return	MAKE_ERR
	}

	/* packfileを削除 */
	packpath	= (_targetdir + "packfile")
	exist	packpath
	if (strsize > -1) {
		delete	packpath
	}

	/* オブジェクトファイルを削除 */
	objpath	= (_targetdir + _objname)
	exist	objpath
	if (strsize > -1) {
		delete	objpath
	}

	/* 一時スクリプトとカスタムランタイムを削除 */
	exist	_tmprtpath
	if (strsize > -1) {
		delete	_tmprtpath
	}
	exist	_tmpscrpath
	if (strsize > -1) {
		delete	_tmpscrpath
	}

	return	MAKE_OK

/**********************************************************/
// モジュール初期化
/**********************************************************/
#deffunc chsc_ini str targetpath_, int makeflag_

	targetpath	= targetpath_
	_targetdir	= ""	; スクリプトまたはオブジェクトファイルがあるフォルダ（"\\"付き）
	_scrname	= ""	; 処理対象スクリプト名
	_objname	= ""	; 処理対象オブジェクトファイル名
	_tmprtpath	= ""	; カスタムアイコンを埋め込んだカスタムランタイムのパス（必要であれば）
	_tmpscrpath	= ""	; カスタムランタイムを使う命令を追加した一時スクリプトのパス（必要であれば）
	_runopt		= ""	; オブジェクトファイルを実行するときの起動オプション

	ext = getpath(getpath(targetpath, GETPATH_EXT), GETPATH_LOWCASE)
	if ((ext = ".as") | (ext = ".hsp")) {		; コンパイルを含む処理

		/* スクリプトフォルダとスクリプト名設定 */
		_chsc_getppvals targetpath, ";#startscr", "", scrpath, FALSE	; 対象スクリプト変更命令チェック
		if (scrpath ! "") {		; 指定されている
			if instr(scrpath, 0, ":") = -1 {	; フルパスではないっぽい
				_targetdir	= getpath(targetpath, GETPATH_DIR)
				_scrname	= scrpath
			}
			else {
				_targetdir	= getpath(scrpath, GETPATH_DIR)
				_scrname	= getpath(scrpath, GETPATH_REMDIR)
			}
		}
		else {
			_targetdir	= getpath(targetpath, GETPATH_DIR)
			_scrname	= getpath(targetpath, GETPATH_REMDIR)
		}

		/* スクリプト内に埋め込まれた起動オプションを取得 */
		filebuf		= ""
		notesel		filebuf
		noteload	(_targetdir + _scrname)
		noteget		linestr, 0
		if (instr(linestr, 0, ";! ") = 0) {
			getstr	_runopt, linestr, 3
		}

		if (makeflag_ = FALSE) {				; 実行ファイル作成は行わない
			hsc_ini		_scrname
			return
		}
	}
	else {									; オブジェクトファイルの実行のみ
		_targetdir	= getpath(targetpath, GETPATH_DIR)
		_objname	= getpath(targetpath, GETPATH_REMDIR)
		return
	}

	// スクリプト内にアイコンリソース指定があるか確認し、ある場合は   //
	// そのアイコンを組み込んだカスタムランタイムを作成 -->           //
	// そのランタイムを使用するように修正した一時スクリプトを作成 --> //
	// さらにそのスクリプトをコンパイル対象として設定                 //

	/* スクリプト内のアイコンリソース指定を取得 */
	_chsc_getppvals (_targetdir + _scrname), ";#makeopt", "icon_rsrc", iconames, TRUE
	repeat	length(iconames)
		if (iconames(cnt) ! "") {
			if (instr(iconames(cnt), 0, ":") = -1) {			; フルパスではないっぽい
				iconames(cnt)	= (_targetdir + iconames(cnt))		; フルパスに
			}
		}
	loop

	if (iconames(0) ! "") {			; アイコンが最低1つ指定されている

		/* 使用ランタイム指定を取得 */
		_chsc_getppvals (_targetdir + _scrname), "#packopt", "runtime", rtname_2, FALSE
		if (rtname_2 = "") {		; #packoptでは指定されていない

			_chsc_getppvals (_targetdir + _scrname), "#runtime", "", rtname_2, FALSE
			if (rtname_2 = "") {	; #runtimeでも指定されていない
				rtname_2	= "hsprt"
				rtdirpath	= (dir_exe + "\\")
			}
			else {
				if (getpath(rtname_2, GETPATH_EXT) = "") {
					rtname_2	+= ".hrt"
				}
				rtdirpath	= (dir_exe + "\\runtime\\")
			}
		}
		else {
			rtdirpath	= (dir_exe + "\\runtime\\")
		}

		/* コンソールランタイムが指定されていたら書き換えは行わない */
		if (rtname_2 = "hsp3cl.hrt") {
			goto *@f
		}

		/* ランタイムを"_(ランタイム名)"という名前で同じ場所にコピー */
		_tmprtpath	= (rtdirpath + "_" + rtname_2)
		bcopy	(rtdirpath + rtname_2), _tmprtpath

		/* カスタムランタイムのアイコンを書き換え */
		update_hrt_icon		_tmprtpath, iconames
	
		/* スクリプトを"_(スクリプト名)"という名前で同じ場所にコピー */
		_tmpscrpath	= (_targetdir + "_" + _scrname)
		bcopy	(_targetdir + _scrname), _tmpscrpath

		/* 一時スクリプトのランタイム指定を書き換え */
		filebuf		= ""
		notesel		filebuf
		noteload	_tmpscrpath
		filebuf		+= ("\n#packopt runtime " + "\"_" + rtname_2 + "\"")
		notesave	_tmpscrpath

		/* 一時スクリプトをコンパイル対象に設定 */
		hsc_ini	("_" + _scrname)
		return
	}
*@

	hsc_ini	_scrname
	return

/**********************************************************/
// キーワード一覧を取得
/**********************************************************/
#defcfunc chsc_getsym

	hsc_clrmes
	hsc3_getsym
	keywords	= _chsc_getmes()
	return	keywords

/**********************************************************/
#global

#endif