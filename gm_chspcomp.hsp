/***********************************************************

	"hspcmp.dll"ラッパーモジュール

		【2007/08/21 更新】

		【使用上の注意】

			処理対象スクリプトが実行ファイル自動作成用に
　　　　	書かれていることが前提。

		【命令一覧】

			モジュール初期化

;			#deffunc chsc_ini str targetpath_, int makeflag_
				// targetpath_	:	処理対象のスクリプトまたはオブジェクトファイルのフルパス
				// makeflag_	:	実行ファイルの作成を行う場合は1、それ以外の場合は0を指定


			実行ファイル自動作成向けのコンパイル

;			#deffunc chsc_autocomp str cmpname_, int dbinfo_flag_, int cmpmode_, int dbwin_flag_
				// cmpname_			:	作成するオブジェクトファイル名
				// dbinfo_flag_		:	hsc_comp命令のp1に指定する値
				// cmpmode_			:	hsc_comp命令のp2に指定する値
				// dbwin_flag_		:	hsc_comp命令のp3に指定する値


			オブジェクトファイル実行

;			#deffunc chsc_run str runopt_
				// runopt_	:	コマンドラインに付加する起動オプション文字列


			実行ファイル自動作成

;			#deffunc chsc_automake int deltmpflag_
				// deltmpflag_		:	処理終了後packfileとオブジェクトファイルを削除するかどうか（1=yes / 0=no）


			キーワード一覧を取得

;			#defcfunc chsc_getsym


		【使い方】

			（コンパイル）

			chsc_ini -> chsc_autocomp

			（オブジェクトファイル実行）

			chsc_ini -> chsc_run

			（実行ファイル作成）

			chsc_ini -> chsc_autocomp -> chsc_automake

			（キーワード一覧を取得）

			chsc_getsym


		【依存モジュール】

			gm_hrt_icon.hsp

***********************************************************/
#ifndef	__GM_CHSPCOMP__
#define	global	__GM_CHSPCOMP__

#include "gm_hrt_icon.hsp"


#module chspcomp

	#include "hspcmp.as"

	#const	TRUE				1
	#const	FALSE				0

	#const	GETPATH_NAME		1	// 拡張子を除くファイル名
	#const	GETPATH_EXT			2	// 拡張子のみ(.???)
	#const	GETPATH_REMDIR		8	// ディレクトリ情報を取り除く
	#const	GETPATH_LOWCASE		16	// 文字列を小文字に変換する
	#const	GETPATH_DIR			32	// ディレクトリ情報のみ

	/* chsc_autocomp命令パラメータ用（hsc_comp命令用） */
	#const	NO_HSP3_MACRO		1
	#const	DEBUG_SYMBOL_FLAG	2
	#const	AUTO_MAKE_FLAG		4

	/* _chsc_savemes */
	#define	CHSC_MESFILE_NAME	"chspcomp.txt"

	/* _chsc_getexepath */
	#define	DEF_EXENAME			"hsptmp.exe"
	#define	EXE_EXT				".exe"

	/* chsc_autocomp */
	#const	COMP_OK				0
	#const	COMP_ERR			1

	/* chsc_run */
	#define	DEF_RTEXENAME		"hsp3.exe"

	/* chsc_automake */
	#const	MAKE_OK				0
	#const	MAKE_ERR			1
	#define	OBJ_NAME_S			"start.ax"
	#define	OBJ_NAME_O			"obj"
	#define	OBJ_EXT				".ax"

	;変数、ユーザ定義命令・関数　命名規則
	;
	;	特に重要な変数							_???
	;	外部から呼んではいけない命令・関数		_???
	;	命令・関数のパラメータ					???_
	;	戻り値用パラメータ						ret_???_

/**********************************************************/
// コンパイラからのメッセージを取得
/**********************************************************/
#defcfunc _chsc_getmes

	hsc3_messize	len
	sdim getmesbuf, len + 1
	hsc_getmes		getmesbuf
	return	getmesbuf

/**********************************************************/
// コンパイラからのメッセージを保存
/**********************************************************/
#deffunc _chsc_savemes

	savemesbuf	= _chsc_getmes()
	if savemesbuf ! "" {
		notesel		savemesbuf
		notesave	dir_exe + "\\" + CHSC_MESFILE_NAME
	}
	return

/**********************************************************/
// 実行ファイル自動作成向けのコンパイル
/**********************************************************/
#deffunc chsc_autocomp str cmpname_, int dbinfoflag_, int cmpmode_, int dbwinflag_

	chdir	_targetdir

	/* オブジェクトファイル名指定 */
	hsc_objname	cmpname_
	_objname	= cmpname_

	/* 古いpackfileを削除 */
	oldfilepath	= _targetdir + "packfile"
	exist	oldfilepath
	if strsize > -1 {
		delete	oldfilepath
	}

;	/* 古いiファイルを削除 */
;	oldfilepath	= _targetdir + _scrname + ".i"
;	exist	oldfilepath
;	if strsize > -1 {
;		delete	oldfilepath
;	}
;
	/* 古いオブジェクトファイルを削除 */
	oldfilepath	= _targetdir + cmpname_
	exist	oldfilepath
	if strsize > -1 {
		delete	oldfilepath
	}

	/* コンパイル実行 */
	hsc_clrmes
	hsc_comp	dbinfoflag_, cmpmode_, dbwinflag_
	_chsc_savemes

	/* 結果チェック */
	exist	oldfilepath
	if strsize = -1 {
		return	COMP_ERR
	}
	return	COMP_OK

/**********************************************************/
// オブジェクトファイル実行
/**********************************************************/
#deffunc chsc_run str runopt_

	chdir	_targetdir

	/* ランタイム名取得 */
	rtname	= ""							// 明示的に文字列変数を用意しないとだめ
	hsc3_getruntime	rtname, _objname		// #runtime命令で指定されたもののみ取得可

	/* コマンドライン生成 */
	if rtname = "" {
		rtname	= DEF_RTEXENAME
	}
	cmdline	= "\"" + dir_exe + "\\" + rtname + "\" " + _objname		// 変数に入れないとだめ
	if runopt_ ! "" {
		cmdline	+= " "
	}
	cmdline	+= runopt_

	/* 実行 */
	hsc_clrmes
	hsc3_run	cmdline
	_chsc_savemes
	return

/**********************************************************/
// プリプロセッサで指定されているhspcmp関連オプションの値（文字列）を取得
/**********************************************************/
#deffunc _chsc_gethspcmpopt str scrpath_, str ppcmd_, str optname_, array ret_optvals_, int repeatflag_

	/* スクリプト読み込み */
	notesel		scrbuf
	noteload	scrpath_

	/* 検索 */
	optval	= ""
	sdim	ret_optvals_, 64, 1
	validx	= 0

	repeat noteinfo(0)
		noteget	linestr, cnt
		if linestr = "" {
			continue
		}

		/* プリプロセッサ命令を探す */
		i	= instr(linestr, 0, ppcmd_)
		if i = -1 {
			continue
		}
		char_i_1	=	instr(linestr, 0, ";")	// 
		char_i_2	=	instr(linestr, 0, "/")	// プリプロセッサ命令の前に
		if (char_i_1 > -1) & (char_i_1 < i) {	// 
			continue							// コメント記号らしきものが
		}										// 
		if (char_i_2 > -1) & (char_i_2 < i) {	// あったらその行は無視
			continue							// 
		}										// 
		offset	= (i + strlen(ppcmd_))

		/* オプション名を探す */
		if optname_ = "" {
			goto *@f
		}
		i2	= instr(linestr, offset, optname_)
		if i2 = -1 {
			continue
		}
		offset	+=	(i2 + strlen(optname_))
*@
		/* オプション値を探す */
		i3		=	instr(linestr, offset, "\"")
		if i3 = -1 {
			continue
		}
		offset	+=	i3 + strlen("\"")
		getstr	optval, linestr, offset, '"'
		ret_optvals_(validx)	= optval

		if repeatflag_ = FALSE {
			break
		}
		else {
			validx	++
		}
	loop
	return

/**********************************************************/
// スクリプトで指定されている実行ファイル名を含むパスを取得
/**********************************************************/
#defcfunc _chsc_getexepath

	_chsc_gethspcmpopt (_targetdir + _scrname), "#packopt", "name", exename, FALSE
	if exename = "" {
		exename	= DEF_EXENAME
	}
	else {
		if getpath(exename, 2) ! EXE_EXT {
			exename	+= EXE_EXT
		}
	}
	return	_targetdir + exename

/**********************************************************/
// 実行ファイル自動作成
/**********************************************************/
#deffunc chsc_automake int deltmpflag_

	/* 古い実行ファイルを削除 */
	path	= _chsc_getexepath()
	exist	path
	if strsize > -1 {
		delete	path
	}

	/* 実行ファイル作成 */
	hsc_clrmes
	hsc3_make	dir_exe + "\\runtime"
	_chsc_savemes

	/* 実行ファイルの存在を確認 */
	exist	path
	if strsize = -1 {
		return	MAKE_ERR
	}

	if deltmpflag_ {
		/* packfileを削除 */
		path	= _targetdir + "packfile"
		exist	path
		if strsize > -1 {
			delete	path
		}
		/* オブジェクトファイルを削除 */
		repeat 3
			switch	cnt
			case	0
				objname	= OBJ_NAME_S
				swbreak
			case	1
				objname	= OBJ_NAME_O
				swbreak
			case	2
				objname	= getpath(_scrname, GETPATH_NAME) + OBJ_EXT
				swbreak
			swend
			path	= _targetdir + objname
			exist	path
			if strsize > -1 {
				delete	path
			}
		loop
	}
	return	MAKE_OK

/**********************************************************/
// モジュール初期化
/**********************************************************/
#deffunc chsc_ini str targetpath_, int makeflag_

	_targetdir	= getpath(targetpath_, GETPATH_DIR)	// スクリプトまたはオブジェクトファイルがあるフォルダを取得（"\\"付き）
	_tmprtpath	= ""
	_tmpscrpath	= ""

	ext = getpath(getpath(targetpath_, GETPATH_EXT), GETPATH_LOWCASE)
	if (ext = ".as") | (ext = ".hsp") {		; コンパイルを含む処理
		_scrname	= getpath(targetpath_, GETPATH_REMDIR)
		_objname	= ""
		if makeflag_ = FALSE {				; 実行ファイル作成は行わない
			hsc_ini		_scrname
			return
		}
	}
	else {									; オブジェクトファイルの実行のみ
		_scrname	= ""
		_objname	= getpath(targetpath_, GETPATH_REMDIR)
		return
	}

	// スクリプト内にアイコンリソース指定があるか確認し、ある場合は   //
	// そのアイコンを組み込んだカスタムランタイムを作成 -->           //
	// そのランタイムを使用するように修正した一時スクリプトを作成 --> //
	// さらにそのスクリプトをコンパイル対象として設定                 //

	/* スクリプト内のアイコンリソース指定を取得 */
	_chsc_gethspcmpopt (_targetdir + _scrname), ";#makeopt", "icon_rsrc", iconames, TRUE
	repeat	length(iconames)
		if iconames(cnt) ! "" {
			if instr(iconames(cnt), 0, ":") = -1 {	; フルパスではないっぽい
				iconames(cnt)	= (_targetdir + iconames(cnt))	; フルパスに
			}
		}
	loop

	if iconames(0) ! "" {		; アイコンが最低1つ指定されている
		/* 使用ランタイム指定を取得 */
		_chsc_gethspcmpopt (_targetdir + _scrname), "#packopt", "runtime", rtname_2, FALSE

		if rtname_2 = "" {		; #packoptでは指定されていない
			_chsc_gethspcmpopt (_targetdir + _scrname), "#runtime", "", rtname_2, FALSE

			if rtname_2 = "" {		; #runtimeでも指定されていない
				rtname_2	= "hsprt"
				rtdirpath	= dir_exe + "\\"
			}
			else {
				if getpath(rtname_2, GETPATH_EXT) = "" {
					rtname_2	+= ".hrt"
				}
				rtdirpath	= dir_exe + "\\runtime\\"
			}
		}
		else {
			rtdirpath	= dir_exe + "\\runtime\\"
		}

		/* コンソールランタイムが指定されていたら書き換えは行わない */
		if rtname_2 = "hsp3cl.hrt" {
			goto *@f
		}

		/* ランタイムを"_(ランタイム名)"という名前で同じ場所にコピー */
		_tmprtpath	= rtdirpath + "_" + rtname_2
		bcopy	rtdirpath + rtname_2, _tmprtpath

		/* カスタムランタイムのアイコンを書き換え */
		update_hrt_icon		_tmprtpath, iconames
	
		/* スクリプトを"_(スクリプト名)"という名前で同じ場所にコピー */
		_tmpscrpath	= _targetdir + "_" + _scrname
		bcopy	_targetdir + _scrname, _tmpscrpath

		/* 一時スクリプトのランタイム指定を書き換え */
		notesel		filebuf
		noteload	_tmpscrpath
		filebuf		+= "\n#packopt runtime " + "\"_" + rtname_2 + "\""
		notesave	_tmpscrpath

		/* 一時スクリプトをコンパイル対象に設定 */
		hsc_ini	("_" + _scrname)
		return
	}
*@
	hsc_ini	_scrname
	return

/**********************************************************/
// キーワード一覧を取得
/**********************************************************/
#defcfunc chsc_getsym

	hsc_clrmes
	hsc3_getsym
	keywords	= _chsc_getmes()
	return	keywords

/**********************************************************/
// 終了処理
/**********************************************************/
#deffunc chsc_finalize onexit

	/* 一時スクリプトとカスタムランタイムを削除 */
	exist	_tmprtpath
	if strsize > -1 {
		delete	_tmprtpath
	}
	exist	_tmpscrpath
	if strsize > -1 {
		delete	_tmpscrpath
	}
	return

/**********************************************************/
#global

#endif